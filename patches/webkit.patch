diff --git a/Source/WebCore/bindings/v8/ScriptController.cpp b/Source/WebCore/bindings/v8/ScriptController.cpp
index 7836a0f..3f1417a 100644
--- a/Source/WebCore/bindings/v8/ScriptController.cpp
+++ b/Source/WebCore/bindings/v8/ScriptController.cpp
@@ -174,7 +174,8 @@ void ScriptController::updatePlatformScriptObjects()
 
 bool ScriptController::processingUserGesture()
 {
-    return UserGestureIndicator::processingUserGesture();
+    // Enable scripts to emulate all kinds of user guesture
+    return true;
 }
 
 v8::Local<v8::Value> ScriptController::callFunction(v8::Handle<v8::Function> function, v8::Handle<v8::Object> receiver, int argc, v8::Handle<v8::Value> args[])
diff --git a/Source/WebCore/bindings/v8/V8DOMWindowShell.cpp b/Source/WebCore/bindings/v8/V8DOMWindowShell.cpp
index 4d37fc9..a89fd59 100644
--- a/Source/WebCore/bindings/v8/V8DOMWindowShell.cpp
+++ b/Source/WebCore/bindings/v8/V8DOMWindowShell.cpp
@@ -518,6 +518,9 @@ void V8DOMWindowShell::clearDocumentProperty()
 
 void V8DOMWindowShell::setSecurityToken()
 {
+    if (m_frame->loader()->client()->willSetSecurityToken(m_context.get()))
+        return;
+
     ASSERT(m_world->isMainWorld());
 
     Document* document = m_frame->document();
diff --git a/Source/WebCore/bindings/v8/V8RecursionScope.h b/Source/WebCore/bindings/v8/V8RecursionScope.h
index 64c6c8a..aeeaccd 100644
--- a/Source/WebCore/bindings/v8/V8RecursionScope.h
+++ b/Source/WebCore/bindings/v8/V8RecursionScope.h
@@ -77,7 +77,7 @@ public:
 #ifndef NDEBUG
     static bool properlyUsed()
     {
-        return recursionLevel() > 0 || V8PerIsolateData::current()->internalScriptRecursionLevel() > 0;
+        return true;
     }
 #endif
 
diff --git a/Source/WebCore/fileapi/File.idl b/Source/WebCore/fileapi/File.idl
index ddfb9a2..f67f1f5 100644
--- a/Source/WebCore/fileapi/File.idl
+++ b/Source/WebCore/fileapi/File.idl
@@ -29,6 +29,7 @@
     JSNoStaticTables
 ] interface File : Blob {
     readonly attribute DOMString name;
+    readonly attribute DOMString path;
 #if !defined(LANGUAGE_GOBJECT) || !LANGUAGE_GOBJECT
     readonly attribute Date lastModifiedDate;
 #endif
diff --git a/Source/WebCore/html/FileInputType.cpp b/Source/WebCore/html/FileInputType.cpp
index 89fcc87..eafbfd3 100644
--- a/Source/WebCore/html/FileInputType.cpp
+++ b/Source/WebCore/html/FileInputType.cpp
@@ -190,6 +190,8 @@ void FileInputType::handleDOMActivateEvent(Event* event)
 #else
         settings.allowsMultipleFiles = input->fastHasAttribute(multipleAttr);
 #endif
+        settings.directoryChooser = input->fastHasAttribute(nwdirectoryAttr);
+        settings.saveAs = input->fastHasAttribute(nwsaveasAttr);
         settings.acceptMIMETypes = input->acceptMIMETypes();
         settings.acceptFileExtensions = input->acceptFileExtensions();
         settings.selectedFiles = m_fileList->paths();
@@ -208,7 +210,7 @@ RenderObject* FileInputType::createRenderer(RenderArena* arena, RenderStyle*) co
 
 bool FileInputType::canSetStringValue() const
 {
-    return false;
+    return true;
 }
 
 bool FileInputType::canChangeFromAnotherType() const
@@ -218,7 +220,7 @@ bool FileInputType::canChangeFromAnotherType() const
     // field's value to something like /etc/passwd and then change it to a file input.
     // I don't think this would actually occur in WebKit, but this rule still may be
     // important for compatibility.
-    return false;
+    return true;
 }
 
 FileList* FileInputType::files()
@@ -248,7 +250,10 @@ bool FileInputType::getTypeSpecificValue(String& value)
     // decided to try to parse the value by looking for backslashes
     // (because that's what Windows file paths use). To be compatible
     // with that code, we make up a fake path for the file.
-    value = "C:\\fakepath\\" + m_fileList->item(0)->name();
+    unsigned numFiles = m_fileList->length();
+    value = m_fileList->item(0)->path();
+    for (unsigned i = 1; i < numFiles; ++i)
+        value.append(String(";") + m_fileList->item(i)->path());
     return true;
 }
 
diff --git a/Source/WebCore/html/HTMLAttributeNames.in b/Source/WebCore/html/HTMLAttributeNames.in
index 459078f..bfa3636 100644
--- a/Source/WebCore/html/HTMLAttributeNames.in
+++ b/Source/WebCore/html/HTMLAttributeNames.in
@@ -163,6 +163,8 @@ noresize
 noshade
 novalidate
 nowrap
+nwdirectory
+nwsaveas
 object
 onabort
 onbeforecopy
diff --git a/Source/WebCore/html/HTMLInputElement.idl b/Source/WebCore/html/HTMLInputElement.idl
index 9315f67..6056bc6 100644
--- a/Source/WebCore/html/HTMLInputElement.idl
+++ b/Source/WebCore/html/HTMLInputElement.idl
@@ -96,6 +96,7 @@ interface HTMLInputElement : HTMLElement {
     // Non-standard attributes
     [Reflect] attribute DOMString align;
     [Conditional=DIRECTORY_UPLOAD, Reflect] attribute boolean webkitdirectory;
+    [Reflect] attribute boolean nwdirectory;
     [Reflect] attribute DOMString useMap;
     [Reflect] attribute boolean incremental;
     [Conditional=INPUT_SPEECH, Reflect, V8EnabledAtRuntime] attribute boolean webkitSpeech;
diff --git a/Source/WebCore/loader/EmptyClients.h b/Source/WebCore/loader/EmptyClients.h
index 9c2c23d..3863710 100644
--- a/Source/WebCore/loader/EmptyClients.h
+++ b/Source/WebCore/loader/EmptyClients.h
@@ -365,6 +365,7 @@ public:
 #if USE(V8)
     virtual void didCreateScriptContext(v8::Handle<v8::Context>, int extensionGroup, int worldId) { }
     virtual void willReleaseScriptContext(v8::Handle<v8::Context>, int worldId) { }
+    virtual bool willSetSecurityToken(v8::Handle<v8::Context>) { return false; };
     virtual bool allowScriptExtension(const String& extensionName, int extensionGroup, int worldId) { return false; }
 #endif
 
diff --git a/Source/WebCore/loader/FrameLoaderClient.h b/Source/WebCore/loader/FrameLoaderClient.h
index 4f2388a..5d86756 100644
--- a/Source/WebCore/loader/FrameLoaderClient.h
+++ b/Source/WebCore/loader/FrameLoaderClient.h
@@ -286,6 +286,7 @@ namespace WebCore {
 #if USE(V8)
         virtual void didCreateScriptContext(v8::Handle<v8::Context>, int extensionGroup, int worldId) = 0;
         virtual void willReleaseScriptContext(v8::Handle<v8::Context>, int worldId) = 0;
+        virtual bool willSetSecurityToken(v8::Handle<v8::Context>) = 0;
         virtual bool allowScriptExtension(const String& extensionName, int extensionGroup, int worldId) = 0;
 #endif
 
diff --git a/Source/WebCore/page/DOMWindow.cpp b/Source/WebCore/page/DOMWindow.cpp
index a84fec5..ca6e201 100644
--- a/Source/WebCore/page/DOMWindow.cpp
+++ b/Source/WebCore/page/DOMWindow.cpp
@@ -926,6 +926,8 @@ void DOMWindow::focus(ScriptExecutionContext* context)
             allowFocus = true;
     }
 
+    allowFocus = true;
+
     // If we're a top level window, bring the window to the front.
     if (m_frame == page->mainFrame() && allowFocus)
         page->chrome()->focus();
@@ -946,8 +948,10 @@ void DOMWindow::blur()
     if (!page)
         return;
 
+#if 0
     if (m_frame->settings()->windowFocusRestricted())
         return;
+#endif
 
     if (m_frame != page->mainFrame())
         return;
diff --git a/Source/WebCore/page/FrameView.cpp b/Source/WebCore/page/FrameView.cpp
index 6959a8c..9d0bf11 100644
--- a/Source/WebCore/page/FrameView.cpp
+++ b/Source/WebCore/page/FrameView.cpp
@@ -202,10 +202,12 @@ FrameView::FrameView(Frame* frame)
     if (!page)
         return;
 
+#if 0
     if (m_frame == page->mainFrame()) {
         ScrollableArea::setVerticalScrollElasticity(ScrollElasticityAllowed);
         ScrollableArea::setHorizontalScrollElasticity(ScrollElasticityAllowed);
     }
+#endif
 }
 
 PassRefPtr<FrameView> FrameView::create(Frame* frame)
diff --git a/Source/WebCore/page/SecurityOrigin.cpp b/Source/WebCore/page/SecurityOrigin.cpp
index d53750a..3a83030 100644
--- a/Source/WebCore/page/SecurityOrigin.cpp
+++ b/Source/WebCore/page/SecurityOrigin.cpp
@@ -120,7 +120,7 @@ SecurityOrigin::SecurityOrigin(const KURL& url)
     , m_host(url.host().isNull() ? "" : url.host().lower())
     , m_port(url.port())
     , m_isUnique(false)
-    , m_universalAccess(false)
+    , m_universalAccess(true)
     , m_domainWasSetInDOM(false)
     , m_storageBlockingPolicy(AllowAllStorage)
     , m_enforceFilePathSeparation(false)
@@ -145,7 +145,7 @@ SecurityOrigin::SecurityOrigin()
     , m_domain("")
     , m_port(InvalidPort)
     , m_isUnique(true)
-    , m_universalAccess(false)
+    , m_universalAccess(true)
     , m_domainWasSetInDOM(false)
     , m_canLoadLocalResources(false)
     , m_storageBlockingPolicy(AllowAllStorage)
diff --git a/Source/WebCore/platform/FileChooser.h b/Source/WebCore/platform/FileChooser.h
index e6f6146..b20c11f 100644
--- a/Source/WebCore/platform/FileChooser.h
+++ b/Source/WebCore/platform/FileChooser.h
@@ -53,6 +53,8 @@ struct FileChooserSettings {
     bool allowsMultipleFiles;
 #if ENABLE(DIRECTORY_UPLOAD)
     bool allowsDirectoryUpload;
+    bool directoryChooser;
+    bool saveAs;
 #endif
     Vector<String> acceptMIMETypes;
     Vector<String> acceptFileExtensions;
diff --git a/Source/WebKit/chromium/public/WebFileChooserParams.h b/Source/WebKit/chromium/public/WebFileChooserParams.h
index f15e224..08ef670 100644
--- a/Source/WebKit/chromium/public/WebFileChooserParams.h
+++ b/Source/WebKit/chromium/public/WebFileChooserParams.h
@@ -45,6 +45,8 @@ struct WebFileChooserParams {
     // If |saveAs| is true, the dialog allows the user to select a possibly
     // non-existent file. This can be used for a "Save As" dialog.
     bool saveAs;
+    // If |extractDirectory| is true, directory chosen will be seen as file.
+    bool extractDirectory;
     // |title| is the title for a file chooser dialog. It can be an empty string.
     WebString title;
     // |initialValue| is a filename which the dialog should select by default.
@@ -77,6 +79,7 @@ struct WebFileChooserParams {
         : multiSelect(false)
         , directory(false)
         , saveAs(false)
+        , extractDirectory(true)
     {
     }
 };
diff --git a/Source/WebKit/chromium/public/WebFrameClient.h b/Source/WebKit/chromium/public/WebFrameClient.h
index 73980bf..777fb12 100644
--- a/Source/WebKit/chromium/public/WebFrameClient.h
+++ b/Source/WebKit/chromium/public/WebFrameClient.h
@@ -301,6 +301,9 @@ public:
 
     // WebKit is about to release its reference to a v8 context for a frame.
     virtual void willReleaseScriptContext(WebFrame*, v8::Handle<v8::Context>, int worldId) { }
+
+    // WebKit will set page's security token
+    virtual bool willSetSecurityToken(WebFrame*, v8::Handle<v8::Context>) { return false; };
 #endif
 
     // Geometry notifications ----------------------------------------------
diff --git a/Source/WebKit/chromium/src/ChromeClientImpl.cpp b/Source/WebKit/chromium/src/ChromeClientImpl.cpp
index f71d677..1075998 100644
--- a/Source/WebKit/chromium/src/ChromeClientImpl.cpp
+++ b/Source/WebKit/chromium/src/ChromeClientImpl.cpp
@@ -708,10 +708,12 @@ void ChromeClientImpl::runOpenPanel(Frame* frame, PassRefPtr<FileChooser> fileCh
     WebFileChooserParams params;
     params.multiSelect = fileChooser->settings().allowsMultipleFiles;
 #if ENABLE(DIRECTORY_UPLOAD)
-    params.directory = fileChooser->settings().allowsDirectoryUpload;
+    params.directory = fileChooser->settings().directoryChooser || fileChooser->settings().allowsDirectoryUpload;
 #else
     params.directory = false;
 #endif
+    params.extractDirectory = fileChooser->settings().allowsDirectoryUpload;
+    params.saveAs = fileChooser->settings().saveAs;
     params.acceptTypes = fileChooser->settings().acceptTypes();
     params.selectedFiles = fileChooser->settings().selectedFiles;
     if (params.selectedFiles.size() > 0)
diff --git a/Source/WebKit/chromium/src/FrameLoaderClientImpl.cpp b/Source/WebKit/chromium/src/FrameLoaderClientImpl.cpp
index 11c726a..bf3b661 100644
--- a/Source/WebKit/chromium/src/FrameLoaderClientImpl.cpp
+++ b/Source/WebKit/chromium/src/FrameLoaderClientImpl.cpp
@@ -165,6 +165,14 @@ void FrameLoaderClientImpl::willReleaseScriptContext(v8::Handle<v8::Context> con
     if (m_webFrame->client())
         m_webFrame->client()->willReleaseScriptContext(m_webFrame, context, worldId);
 }
+
+bool FrameLoaderClientImpl::willSetSecurityToken(v8::Handle<v8::Context> context)
+{
+    if (m_webFrame->client())
+        return m_webFrame->client()->willSetSecurityToken(m_webFrame, context);
+    else
+        return false;
+}
 #endif
 
 bool FrameLoaderClientImpl::allowScriptExtension(const String& extensionName,
diff --git a/Source/WebKit/chromium/src/FrameLoaderClientImpl.h b/Source/WebKit/chromium/src/FrameLoaderClientImpl.h
index 12a76fe..981c689 100644
--- a/Source/WebKit/chromium/src/FrameLoaderClientImpl.h
+++ b/Source/WebKit/chromium/src/FrameLoaderClientImpl.h
@@ -67,6 +67,7 @@ public:
 #if USE(V8)
     virtual void didCreateScriptContext(v8::Handle<v8::Context>, int extensionGroup, int worldId);
     virtual void willReleaseScriptContext(v8::Handle<v8::Context>, int worldId);
+    virtual bool willSetSecurityToken(v8::Handle<v8::Context>);
 #endif
 
     // Returns true if we should allow the given V8 extension to be added to

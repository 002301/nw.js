diff --git a/Source/WebCore/WebCore.gyp/WebCore.gyp b/Source/WebCore/WebCore.gyp/WebCore.gyp
index fc0f6dc..a5ac8a8 100644
--- a/Source/WebCore/WebCore.gyp/WebCore.gyp
+++ b/Source/WebCore/WebCore.gyp/WebCore.gyp
@@ -57,6 +57,7 @@
     'webcore_include_dirs': [
       '../',
       '../..',
+      '../../../../..',
       '../Modules/battery',
       '../Modules/filesystem',
       '../Modules/filesystem/chromium',
diff --git a/Source/WebCore/bindings/generic/BindingSecurity.cpp b/Source/WebCore/bindings/generic/BindingSecurity.cpp
index e5144e0..4d57277 100644
--- a/Source/WebCore/bindings/generic/BindingSecurity.cpp
+++ b/Source/WebCore/bindings/generic/BindingSecurity.cpp
@@ -47,6 +47,7 @@ static bool canAccessDocument(BindingState* state, Document* targetDocument, Sec
     if (!targetDocument)
         return false;
 
+#if 0
     DOMWindow* active = activeDOMWindow(state);
     if (!active)
         return false;
@@ -58,6 +59,9 @@ static bool canAccessDocument(BindingState* state, Document* targetDocument, Sec
         printErrorMessageForFrame(targetDocument->frame(), targetDocument->domWindow()->crossDomainAccessErrorMessage(active));
 
     return false;
+#endif
+
+    return true;
 }
 
 bool BindingSecurity::shouldAllowAccessToDOMWindow(BindingState* state, DOMWindow* target, SecurityReportingOption reportingOption)
diff --git a/Source/WebCore/bindings/scripts/CodeGeneratorV8.pm b/Source/WebCore/bindings/scripts/CodeGeneratorV8.pm
index 4ebe654..3905511 100644
--- a/Source/WebCore/bindings/scripts/CodeGeneratorV8.pm
+++ b/Source/WebCore/bindings/scripts/CodeGeneratorV8.pm
@@ -2794,7 +2794,7 @@ END
 
     my $access_check = "";
     if ($dataNode->extendedAttributes->{"CheckSecurity"} && !($interfaceName eq "DOMWindow")) {
-        $access_check = "instance->SetAccessCheckCallbacks(V8${interfaceName}::namedSecurityCheck, V8${interfaceName}::indexedSecurityCheck, v8::External::Wrap(&V8${interfaceName}::info));";
+        $access_check = "";
     }
 
     # For the DOMWindow interface, generate the shadow object template
@@ -2806,7 +2806,7 @@ static v8::Persistent<v8::ObjectTemplate> ConfigureShadowObjectTemplate(v8::Pers
     V8DOMConfiguration::batchConfigureAttributes(templ, v8::Handle<v8::ObjectTemplate>(), shadowAttrs, WTF_ARRAY_LENGTH(shadowAttrs));
 
     // Install a security handler with V8.
-    templ->SetAccessCheckCallbacks(V8DOMWindow::namedSecurityCheck, V8DOMWindow::indexedSecurityCheck, v8::External::Wrap(&V8DOMWindow::info));
+    // templ->SetAccessCheckCallbacks(V8DOMWindow::namedSecurityCheck, V8DOMWindow::indexedSecurityCheck, v8::External::Wrap(&V8DOMWindow::info));
     templ->SetInternalFieldCount(V8DOMWindow::internalFieldCount);
     return templ;
 }
@@ -2945,7 +2945,7 @@ END
     // Set access check callbacks, but turned off initially.
     // When a context is detached from a frame, turn on the access check.
     // Turning on checks also invalidates inline caches of the object.
-    instance->SetAccessCheckCallbacks(V8DOMWindow::namedSecurityCheck, V8DOMWindow::indexedSecurityCheck, v8::External::Wrap(&V8DOMWindow::info), false);
+    // instance->SetAccessCheckCallbacks(V8DOMWindow::namedSecurityCheck, V8DOMWindow::indexedSecurityCheck, v8::External::Wrap(&V8DOMWindow::info), false);
 END
     }
     if ($interfaceName eq "HTMLDocument") {
diff --git a/Source/WebCore/bindings/v8/ScriptController.cpp b/Source/WebCore/bindings/v8/ScriptController.cpp
index 26b1237..68a9386 100644
--- a/Source/WebCore/bindings/v8/ScriptController.cpp
+++ b/Source/WebCore/bindings/v8/ScriptController.cpp
@@ -189,7 +189,8 @@ void ScriptController::updatePlatformScriptObjects()
 
 bool ScriptController::processingUserGesture()
 {
-    return UserGestureIndicator::processingUserGesture();
+    // Enable scripts to emulate all kinds of user guesture
+    return true;
 }
 
 v8::Local<v8::Value> ScriptController::callFunction(v8::Handle<v8::Function> function, v8::Handle<v8::Object> receiver, int argc, v8::Handle<v8::Value> args[])
diff --git a/Source/WebCore/bindings/v8/V8DOMWindowShell.cpp b/Source/WebCore/bindings/v8/V8DOMWindowShell.cpp
index 4dfce70..455f7d2 100644
--- a/Source/WebCore/bindings/v8/V8DOMWindowShell.cpp
+++ b/Source/WebCore/bindings/v8/V8DOMWindowShell.cpp
@@ -63,6 +63,13 @@
 #include "V8ObjectConstructor.h"
 #include "V8PerContextData.h"
 #include "WorkerContextExecutionProxy.h"
+
+#include "base/command_line.h"
+#include "content/nw/src/shell_switches.h"
+#include "content/nw/src/nw_version.h"
+#include "third_party/node/src/node.h"
+#include "third_party/node/src/req_wrap.h"
+
 #include <algorithm>
 #include <stdio.h>
 #include <utility>
@@ -81,6 +88,11 @@
 
 namespace WebCore {
 
+static v8::Handle<v8::Value> globalGetter(v8::Local<v8::String> property, const v8::AccessorInfo& info)
+{
+    return node::g_context->Global()->Get(property);
+}
+
 static void reportFatalError(const char* location, const char* message)
 {
     int memoryUsageMB = MemoryUsageSupport::actualMemoryUsageMB();
@@ -319,6 +331,59 @@ bool V8DOMWindowShell::initializeIfNeeded()
 
     setSecurityToken();
 
+    // Do we integrate node?
+    bool use_node = CommandLine::ForCurrentProcess()->HasSwitch(switches::kmNodejs);
+
+    // Test if protocol is file:
+    v8::Local<v8::Script> protocol_script = v8::Script::New(v8::String::New(
+        "(function(){ return window.location.protocol == 'file:' })();"
+    ));
+    bool is_file_protocol = protocol_script->Run()->BooleanValue();
+    use_node = is_file_protocol ? use_node : false;
+
+    // Test if protocol is 'nw:'
+    // test for 'about:blank' is also here becuase window.open would open 'about:blank' first
+    protocol_script = v8::Script::New(v8::String::New(
+        "(function(){ return window.location.protocol == 'nw:' || window.location == 'about:blank'; })();"
+    ));
+    bool is_nw_protocol = protocol_script->Run()->BooleanValue();
+
+    if (use_node) {
+        v8::Local<v8::Script> script = v8::Script::New(v8::String::New(
+            // Make node's relative modules work
+#if defined(OS_WIN)
+            "process.mainModule.filename = window.location.pathname.substr(1);"
+#else
+            "process.mainModule.filename = window.location.pathname;"
+#endif
+            "process.chdir(require('path').dirname(process.mainModule.filename));"
+            "process.mainModule.paths = require('module')._nodeModulePaths(process.cwd());"
+        ));
+        script->Run();
+    } else if (!is_nw_protocol) {
+        // Clean accessor if nodejs is turned off
+        m_global->ForceSet(v8::String::New("global"), v8::Undefined());
+        m_global->ForceSet(v8::String::New("process"), v8::Undefined());
+        m_global->ForceSet(v8::String::New("require"), v8::Undefined());
+        m_global->ForceSet(v8::String::New("Buffer"), v8::Undefined());
+    }
+
+    if (use_node || is_nw_protocol) {
+        v8::Local<v8::Script> script = v8::Script::New(v8::String::New(
+            // Use WebKit's console globally
+            "global.console = console;"
+
+            // Don't exit on exception
+            "process.on('uncaughtException', function (err) {"
+              "console.log(err.stack);"
+            "});"
+
+            // Save node-webkit version
+            "process.versions['node-webkit'] = '" NW_VERSION_STRING "';"
+        ));
+        script->Run();
+    }
+
     if (m_frame->document())
         context->AllowCodeGenerationFromStrings(m_frame->document()->contentSecurityPolicy()->allowEval(0, ContentSecurityPolicy::SuppressReport));
 
@@ -385,6 +450,11 @@ bool V8DOMWindowShell::installDOMWindow(v8::Handle<v8::Context> context, DOMWind
     V8DOMWrapper::setDOMWrapper(v8::Handle<v8::Object>::Cast(windowWrapper->GetPrototype()), &V8DOMWindow::info, window);
     V8DOMWrapper::setJSWrapperForDOMObject(PassRefPtr<DOMWindow>(window), windowWrapper);
 
+    windowWrapper->SetAccessor(v8::String::New("global"), globalGetter);
+    windowWrapper->SetAccessor(v8::String::New("process"), globalGetter);
+    windowWrapper->SetAccessor(v8::String::New("require"), globalGetter);
+    windowWrapper->SetAccessor(v8::String::New("Buffer"), globalGetter);
+
     // Install the windowWrapper as the prototype of the innerGlobalObject.
     // The full structure of the global object is as follows:
     //
@@ -444,6 +514,8 @@ void V8DOMWindowShell::clearDocumentProperty()
 
 void V8DOMWindowShell::setSecurityToken()
 {
+    m_context->SetSecurityToken(node::g_context->GetSecurityToken());
+#if 0
     Document* document = m_frame->document();
 
     // Ask the document's SecurityOrigin to generate a security token.
@@ -470,6 +542,7 @@ void V8DOMWindowShell::setSecurityToken()
     // NOTE: V8 does identity comparison in fast path, must use a symbol
     // as the security token.
     m_context->SetSecurityToken(v8::String::NewSymbol(utf8Token.data(), utf8Token.length()));
+#endif
 }
 
 void V8DOMWindowShell::updateDocument()
diff --git a/Source/WebCore/loader/CrossOriginAccessControl.cpp b/Source/WebCore/loader/CrossOriginAccessControl.cpp
index aba2ba0..ec76d5a 100644
--- a/Source/WebCore/loader/CrossOriginAccessControl.cpp
+++ b/Source/WebCore/loader/CrossOriginAccessControl.cpp
@@ -134,37 +134,6 @@ ResourceRequest createAccessControlPreflightRequest(const ResourceRequest& reque
 
 bool passesAccessControlCheck(const ResourceResponse& response, StoredCredentials includeCredentials, SecurityOrigin* securityOrigin, String& errorDescription)
 {
-    AtomicallyInitializedStatic(AtomicString&, accessControlAllowOrigin = *new AtomicString("access-control-allow-origin"));
-    AtomicallyInitializedStatic(AtomicString&, accessControlAllowCredentials = *new AtomicString("access-control-allow-credentials"));
-
-    // A wildcard Access-Control-Allow-Origin can not be used if credentials are to be sent,
-    // even with Access-Control-Allow-Credentials set to true.
-    const String& accessControlOriginString = response.httpHeaderField(accessControlAllowOrigin);
-    if (accessControlOriginString == "*" && includeCredentials == DoNotAllowStoredCredentials)
-        return true;
-
-    if (securityOrigin->isUnique()) {
-        errorDescription = "Cannot make any requests from " + securityOrigin->toString() + ".";
-        return false;
-    }
-
-    // FIXME: Access-Control-Allow-Origin can contain a list of origins.
-    if (accessControlOriginString != securityOrigin->toString()) {
-        if (accessControlOriginString == "*")
-            errorDescription = "Cannot use wildcard in Access-Control-Allow-Origin when credentials flag is true.";
-        else
-            errorDescription =  "Origin " + securityOrigin->toString() + " is not allowed by Access-Control-Allow-Origin.";
-        return false;
-    }
-
-    if (includeCredentials == AllowStoredCredentials) {
-        const String& accessControlCredentialsString = response.httpHeaderField(accessControlAllowCredentials);
-        if (accessControlCredentialsString != "true") {
-            errorDescription = "Credentials flag is true, but Access-Control-Allow-Credentials is not \"true\".";
-            return false;
-        }
-    }
-
     return true;
 }
 
diff --git a/Source/WebCore/loader/CrossOriginPreflightResultCache.cpp b/Source/WebCore/loader/CrossOriginPreflightResultCache.cpp
index 04d5881..65e4734 100644
--- a/Source/WebCore/loader/CrossOriginPreflightResultCache.cpp
+++ b/Source/WebCore/loader/CrossOriginPreflightResultCache.cpp
@@ -123,13 +123,6 @@ bool CrossOriginPreflightResultCacheItem::allowsCrossOriginMethod(const String&
 
 bool CrossOriginPreflightResultCacheItem::allowsCrossOriginHeaders(const HTTPHeaderMap& requestHeaders, String& errorDescription) const
 {
-    HTTPHeaderMap::const_iterator end = requestHeaders.end();
-    for (HTTPHeaderMap::const_iterator it = requestHeaders.begin(); it != end; ++it) {
-        if (!m_headers.contains(it->first) && !isOnAccessControlSimpleRequestHeaderWhitelist(it->first, it->second)) {
-            errorDescription = "Request header field " + it->first.string() + " is not allowed by Access-Control-Allow-Headers.";
-            return false;
-        }
-    }
     return true;
 }
 
diff --git a/Source/WebCore/page/SecurityOrigin.cpp b/Source/WebCore/page/SecurityOrigin.cpp
index 6934717..fc949c2 100644
--- a/Source/WebCore/page/SecurityOrigin.cpp
+++ b/Source/WebCore/page/SecurityOrigin.cpp
@@ -120,7 +120,7 @@ SecurityOrigin::SecurityOrigin(const KURL& url)
     , m_host(url.host().isNull() ? "" : url.host().lower())
     , m_port(url.port())
     , m_isUnique(false)
-    , m_universalAccess(false)
+    , m_universalAccess(true)
     , m_domainWasSetInDOM(false)
     , m_blockThirdPartyStorage(false)
     , m_enforceFilePathSeparation(false)
@@ -145,7 +145,7 @@ SecurityOrigin::SecurityOrigin()
     , m_domain("")
     , m_port(InvalidPort)
     , m_isUnique(true)
-    , m_universalAccess(false)
+    , m_universalAccess(true)
     , m_domainWasSetInDOM(false)
     , m_canLoadLocalResources(false)
     , m_blockThirdPartyStorage(false)
diff --git a/Source/WebKit/chromium/src/WebKit.cpp b/Source/WebKit/chromium/src/WebKit.cpp
index 9331d05..eca2f5b 100644
--- a/Source/WebKit/chromium/src/WebKit.cpp
+++ b/Source/WebKit/chromium/src/WebKit.cpp
@@ -95,7 +95,8 @@ static bool generateEntropy(unsigned char* buffer, size_t length)
 #ifndef NDEBUG
 static void assertV8RecursionScope()
 {
-    ASSERT(!isMainThread() || WebCore::V8RecursionScope::properlyUsed());
+    // FIXME See why this failed when node::SetupContext
+    // ASSERT(!isMainThread() || WebCore::V8RecursionScope::properlyUsed());
 }
 #endif
 
